generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AdditionalInfos {
  id                     Int                      @id @default(autoincrement())
  additionalIdToken      String?                  @db.VarChar(255)
  type                   String?                  @db.VarChar(255)
  createdAt              DateTime                 @db.Timestamptz(6)
  updatedAt              DateTime                 @db.Timestamptz(6)
  IdTokenAdditionalInfos IdTokenAdditionalInfos[]

  @@unique([additionalIdToken, type])
}

model Authorizations {
  id                       Int           @id @default(autoincrement())
  allowedConnectorTypes    String[]      @db.VarChar(255)
  disallowedEvseIdPrefixes String[]      @db.VarChar(255)
  idTokenId                Int?          @unique
  idTokenInfoId            Int?
  createdAt                DateTime      @db.Timestamptz(6)
  updatedAt                DateTime      @db.Timestamptz(6)
  IdTokens                 IdTokens?     @relation(fields: [idTokenId], references: [id], onDelete: NoAction)
  IdTokenInfos             IdTokenInfos? @relation(fields: [idTokenInfoId], references: [id], onDelete: NoAction)
}

model Boots {
  id                          String               @id @db.VarChar(255)
  lastBootTime                DateTime?            @db.Timestamptz(6)
  heartbeatInterval           Int?
  bootRetryInterval           Int?
  status                      String?              @db.VarChar(255)
  statusInfo                  Json?                @db.Json
  getBaseReportOnPending      Boolean?
  variablesRejectedOnLastBoot Json?                @db.Json
  bootWithRejectedVariables   Boolean?
  createdAt                   DateTime             @db.Timestamptz(6)
  updatedAt                   DateTime             @db.Timestamptz(6)
  VariableAttributes          VariableAttributes[]
}

model CallMessages {
  id            Int      @id @default(autoincrement())
  correlationId String?  @unique @db.VarChar(255)
  reservationId Int?
  createdAt     DateTime @db.Timestamptz(6)
  updatedAt     DateTime @db.Timestamptz(6)

  @@index([correlationId], map: "call_messages_correlation_id")
}

model Certificates {
  id                 Int       @id @default(autoincrement())
  serialNumber       BigInt?
  issuerName         String?   @db.VarChar(255)
  organizationName   String?   @db.VarChar(255)
  commonName         String?   @db.VarChar(255)
  keyLength          Int?
  validBefore        DateTime? @db.Timestamptz(6)
  signatureAlgorithm String?   @db.VarChar(255)
  countryName        String?   @db.VarChar(255)
  isCA               Boolean?
  pathLen            Int?
  certificateFileId  String?   @db.VarChar(255)
  privateKeyFileId   String?   @db.VarChar(255)
  signedBy           String?   @db.VarChar(255)
  createdAt          DateTime  @db.Timestamptz(6)
  updatedAt          DateTime  @db.Timestamptz(6)

  @@unique([serialNumber, issuerName])
}

model ChargingNeeds {
  id                      Int           @id @default(autoincrement())
  acChargingParameters    Json?
  dcChargingParameters    Json?
  departureTime           DateTime?     @db.Timestamptz(6)
  requestedEnergyTransfer String?       @db.VarChar(255)
  maxScheduleTuples       Int?
  evseDatabaseId          Int?
  transactionDatabaseId   Int?
  createdAt               DateTime      @db.Timestamptz(6)
  updatedAt               DateTime      @db.Timestamptz(6)
  Evses                   Evses?        @relation(fields: [evseDatabaseId], references: [databaseId], onDelete: NoAction)
  Transactions            Transactions? @relation(fields: [transactionDatabaseId], references: [id], onDelete: NoAction)
}

model ChargingProfiles {
  databaseId             Int                 @id @default(autoincrement())
  stationId              String?             @db.VarChar(255)
  id                     Int?
  chargingProfileKind    String?             @db.VarChar(255)
  chargingProfilePurpose String?             @db.VarChar(255)
  recurrencyKind         String?             @db.VarChar(255)
  stackLevel             Int?
  validFrom              DateTime?           @db.Timestamptz(6)
  validTo                DateTime?           @db.Timestamptz(6)
  evseId                 Int?
  isActive               Boolean?            @default(false)
  chargingLimitSource    String?             @default("CSO") @db.VarChar(255)
  createdAt              DateTime            @db.Timestamptz(6)
  updatedAt              DateTime            @db.Timestamptz(6)
  transactionDatabaseId  Int?
  Transactions           Transactions?       @relation(fields: [transactionDatabaseId], references: [id])
  ChargingSchedules      ChargingSchedules[]

  @@unique([stationId, id])
}

model ChargingSchedules {
  databaseId                Int               @id @default(autoincrement())
  id                        Int?
  stationId                 String?           @db.VarChar(255)
  chargingRateUnit          String?           @db.VarChar(255)
  chargingSchedulePeriod    Json?
  duration                  Int?
  minChargingRate           Decimal?          @db.Decimal
  startSchedule             String?           @db.VarChar(255)
  timeBase                  DateTime?         @db.Timestamptz(6)
  chargingProfileDatabaseId Int?
  createdAt                 DateTime          @db.Timestamptz(6)
  updatedAt                 DateTime          @db.Timestamptz(6)
  ChargingProfiles          ChargingProfiles? @relation(fields: [chargingProfileDatabaseId], references: [databaseId], onDelete: Cascade)
  SalesTariffs              SalesTariffs[]

  @@unique([id, stationId])
}

model ChargingStationNetworkProfiles {
  stationId               String                 @db.VarChar(36)
  configurationSlot       Int?                   @unique
  setNetworkProfileId     Int
  websocketServerConfigId String?                @db.VarChar(255)
  createdAt               DateTime               @db.Timestamptz(6)
  updatedAt               DateTime               @db.Timestamptz(6)
  SetNetworkProfiles      SetNetworkProfiles     @relation(fields: [setNetworkProfileId], references: [id], onDelete: Cascade)
  ChargingStations        ChargingStations       @relation(fields: [stationId], references: [id], onDelete: Cascade)
  ServerNetworkProfiles   ServerNetworkProfiles? @relation(fields: [websocketServerConfigId], references: [id], onDelete: NoAction)

  @@id([stationId, setNetworkProfileId])
  @@unique([stationId, websocketServerConfigId], map: "ChargingStationNetworkProfile_stationId_websocketServerConf_key")
}

model ChargingStationSecurityInfos {
  id              Int      @id @default(autoincrement())
  stationId       String?  @unique @db.VarChar(255)
  publicKeyFileId String?  @db.VarChar(255)
  createdAt       DateTime @db.Timestamptz(6)
  updatedAt       DateTime @db.Timestamptz(6)
}

model ChargingStationSequences {
  id               Int              @id @default(autoincrement())
  stationId        String           @db.VarChar(36)
  type             String           @db.VarChar(255)
  value            BigInt           @default(0)
  createdAt        DateTime         @db.Timestamptz(6)
  updatedAt        DateTime         @db.Timestamptz(6)
  ChargingStations ChargingStations @relation(fields: [stationId], references: [id], onDelete: NoAction)

  @@unique([stationId, type])
}

model ChargingStations {
  id                             String                           @id @db.VarChar(36)
  isOnline                       Boolean?
  locationId                     Int?
  createdAt                      DateTime                         @db.Timestamptz(6)
  updatedAt                      DateTime                         @db.Timestamptz(6)
  ChargingStationNetworkProfiles ChargingStationNetworkProfiles[]
  ChargingStationSequences       ChargingStationSequences[]
  Locations                      Locations?                       @relation(fields: [locationId], references: [id], onDelete: NoAction)
  LatestStatusNotifications      LatestStatusNotifications[]
  StatusNotifications            StatusNotifications[]
  Transactions                   Transactions[]
  VariableAttributes             VariableAttributes[]
}

model ComponentVariables {
  componentId Int
  variableId  Int
  createdAt   DateTime   @db.Timestamptz(6)
  updatedAt   DateTime   @db.Timestamptz(6)
  Components  Components @relation(fields: [componentId], references: [id], onDelete: Cascade)
  Variables   Variables  @relation(fields: [variableId], references: [id], onDelete: Cascade)

  @@id([componentId, variableId])
}

model Components {
  id                  Int                   @id @default(autoincrement())
  name                String?               @db.VarChar(255)
  instance            String?               @db.VarChar(255)
  evseDatabaseId      Int?
  createdAt           DateTime              @db.Timestamptz(6)
  updatedAt           DateTime              @db.Timestamptz(6)
  ComponentVariables  ComponentVariables[]
  Evses               Evses?                @relation(fields: [evseDatabaseId], references: [databaseId], onDelete: NoAction)
  EventData           EventData[]
  MessageInfos        MessageInfos[]
  VariableAttributes  VariableAttributes[]
  VariableMonitorings VariableMonitorings[]

  @@unique([name, instance])
}

model CompositeSchedules {
  id                     Int       @id @default(autoincrement())
  stationId              String?   @db.VarChar(255)
  evseId                 Int?
  duration               Int?
  scheduleStart          DateTime? @db.Timestamptz(6)
  chargingRateUnit       String?   @db.VarChar(255)
  chargingSchedulePeriod Json?
  createdAt              DateTime  @db.Timestamptz(6)
  updatedAt              DateTime  @db.Timestamptz(6)
}

model EventData {
  id                    Int         @id @default(autoincrement())
  stationId             String?     @unique @db.VarChar(255)
  eventId               Int?
  trigger               String?     @db.VarChar(255)
  cause                 Int?
  cleared               Boolean?
  variableMonitoringId  Int?
  eventNotificationType String?     @db.VarChar(255)
  variableId            Int?
  componentId           Int?
  createdAt             DateTime    @db.Timestamptz(6)
  updatedAt             DateTime    @db.Timestamptz(6)
  timestamp             DateTime?   @db.Timestamptz(6)
  actualValue           String?     @db.VarChar(255)
  techCode              String?     @db.VarChar(255)
  techInfo              String?     @db.VarChar(255)
  transactionId         String?     @db.VarChar(255)
  Components            Components? @relation(fields: [componentId], references: [id], onDelete: NoAction)
  Variables             Variables?  @relation(fields: [variableId], references: [id], onDelete: NoAction)

  @@index([stationId], map: "event_data_station_id")
}

model Evses {
  databaseId         Int                  @id @default(autoincrement())
  id                 Int?
  connectorId        Int?
  createdAt          DateTime             @db.Timestamptz(6)
  updatedAt          DateTime             @db.Timestamptz(6)
  ChargingNeeds      ChargingNeeds[]
  Components         Components[]
  Reservations       Reservations[]
  TransactionEvents  TransactionEvents[]
  Transactions       Transactions[]
  VariableAttributes VariableAttributes[]

  @@unique([id, connectorId])
}

model IdTokenAdditionalInfos {
  idTokenId        Int
  additionalInfoId Int
  createdAt        DateTime        @db.Timestamptz(6)
  updatedAt        DateTime        @db.Timestamptz(6)
  AdditionalInfos  AdditionalInfos @relation(fields: [additionalInfoId], references: [id], onDelete: Cascade)
  IdTokens         IdTokens        @relation(fields: [idTokenId], references: [id], onDelete: Cascade)

  @@id([idTokenId, additionalInfoId])
}

model IdTokenInfos {
  id                  Int              @id @default(autoincrement())
  status              String?          @db.VarChar(255)
  cacheExpiryDateTime String?          @db.VarChar(255)
  chargingPriority    Int?
  language1           String?          @db.VarChar(255)
  groupIdTokenId      Int?
  language2           String?          @db.VarChar(255)
  personalMessage     Json?            @db.Json
  createdAt           DateTime         @db.Timestamptz(6)
  updatedAt           DateTime         @db.Timestamptz(6)
  Authorizations      Authorizations[]
  IdTokens            IdTokens?        @relation(fields: [groupIdTokenId], references: [id], onDelete: NoAction)
}

model IdTokens {
  id                     Int                      @id @default(autoincrement())
  idToken                String?                  @db.VarChar(255)
  type                   String?                  @db.VarChar(255)
  createdAt              DateTime                 @db.Timestamptz(6)
  updatedAt              DateTime                 @db.Timestamptz(6)
  Authorizations         Authorizations?
  IdTokenAdditionalInfos IdTokenAdditionalInfos[]
  IdTokenInfos           IdTokenInfos[]
  TransactionEvents      TransactionEvents[]

  @@unique([idToken, type])
}

model InstalledCertificates {
  id              Int                                        @id @default(autoincrement())
  stationId       String                                     @db.VarChar(36)
  hashAlgorithm   String                                     @db.VarChar(255)
  issuerNameHash  String                                     @db.VarChar(255)
  issuerKeyHash   String                                     @db.VarChar(255)
  serialNumber    String                                     @db.VarChar(255)
  certificateType enum_InstalledCertificates_certificateType
  createdAt       DateTime                                   @db.Timestamptz(6)
  updatedAt       DateTime                                   @db.Timestamptz(6)
}

model LatestStatusNotifications {
  id                   Int                  @id @default(autoincrement())
  createdAt            DateTime             @db.Timestamptz(6)
  updatedAt            DateTime             @db.Timestamptz(6)
  stationId            String?              @db.VarChar(36)
  statusNotificationId Int?
  ChargingStations     ChargingStations?    @relation(fields: [stationId], references: [id])
  StatusNotifications  StatusNotifications? @relation(fields: [statusNotificationId], references: [id])
}

model Locations {
  id               Int                      @id @default(autoincrement())
  name             String?                  @db.VarChar(255)
  coordinates      Unsupported("geometry")?
  createdAt        DateTime                 @db.Timestamptz(6)
  updatedAt        DateTime                 @db.Timestamptz(6)
  address          String?                  @db.VarChar(255)
  city             String?                  @db.VarChar(255)
  postalCode       String?                  @db.VarChar(255)
  state            String?                  @db.VarChar(255)
  country          String?                  @db.VarChar(255)
  ChargingStations ChargingStations[]
}

model MessageInfos {
  databaseId         Int         @id @default(autoincrement())
  stationId          String?     @db.VarChar(255)
  id                 Int?
  priority           String?     @db.VarChar(255)
  state              String?     @db.VarChar(255)
  startDateTime      DateTime?   @db.Timestamptz(6)
  endDateTime        DateTime?   @db.Timestamptz(6)
  transactionId      String?     @db.VarChar(255)
  message            Json?       @db.Json
  active             Boolean?
  createdAt          DateTime    @db.Timestamptz(6)
  updatedAt          DateTime    @db.Timestamptz(6)
  displayComponentId Int?
  Components         Components? @relation(fields: [displayComponentId], references: [id], onDelete: NoAction)

  @@unique([stationId, id])
  @@index([stationId], map: "message_infos_station_id")
}

model MeterValues {
  id                    Int                @id @default(autoincrement())
  transactionEventId    Int?
  transactionDatabaseId Int?
  sampledValue          Json?              @db.Json
  timestamp             DateTime?          @db.Timestamptz(6)
  createdAt             DateTime           @db.Timestamptz(6)
  updatedAt             DateTime           @db.Timestamptz(6)
  Transactions          Transactions?      @relation(fields: [transactionDatabaseId], references: [id], onDelete: Cascade)
  TransactionEvents     TransactionEvents? @relation(fields: [transactionEventId], references: [id], onDelete: Cascade)
}

model Reservations {
  databaseId              Int       @id @default(autoincrement())
  id                      Int?
  stationId               String?   @db.VarChar(255)
  expiryDateTime          DateTime? @db.Timestamptz(6)
  connectorType           String?   @db.VarChar(255)
  reserveStatus           String?   @db.VarChar(255)
  isActive                Boolean?  @default(false)
  terminatedByTransaction String?   @db.VarChar(255)
  idToken                 Json?
  groupIdToken            Json?
  createdAt               DateTime  @db.Timestamptz(6)
  updatedAt               DateTime  @db.Timestamptz(6)
  evseId                  Int?
  Evses                   Evses?    @relation(fields: [evseId], references: [databaseId])

  @@unique([id, stationId])
}

model SalesTariffs {
  databaseId                 Int                @id @default(autoincrement())
  id                         Int?
  numEPriceLevels            Int?
  salesTariffDescription     String?            @db.VarChar(255)
  salesTariffEntry           Json?
  chargingScheduleDatabaseId Int?
  createdAt                  DateTime           @db.Timestamptz(6)
  updatedAt                  DateTime           @db.Timestamptz(6)
  ChargingSchedules          ChargingSchedules? @relation(fields: [chargingScheduleDatabaseId], references: [databaseId], onDelete: Cascade)

  @@unique([id, chargingScheduleDatabaseId])
}

model SecurityEvents {
  id        Int       @id @default(autoincrement())
  stationId String?   @db.VarChar(255)
  type      String?   @db.VarChar(255)
  timestamp DateTime? @db.Timestamptz(6)
  techInfo  String?   @db.VarChar(255)
  createdAt DateTime  @db.Timestamptz(6)
  updatedAt DateTime  @db.Timestamptz(6)

  @@index([stationId], map: "security_events_station_id")
}

model ServerNetworkProfiles {
  id                                  String                           @id @db.VarChar(255)
  host                                String?                          @db.VarChar(255)
  port                                Int?
  pingInterval                        Int?
  protocol                            String?                          @db.VarChar(255)
  messageTimeout                      Int?
  securityProfile                     Int?
  allowUnknownChargingStations        Boolean?
  tlsKeyFilePath                      String?                          @db.VarChar(255)
  tlsCertificateChainFilePath         String?                          @db.VarChar(255)
  mtlsCertificateAuthorityKeyFilePath String?                          @db.VarChar(255)
  rootCACertificateFilePath           String?                          @db.VarChar(255)
  createdAt                           DateTime                         @db.Timestamptz(6)
  updatedAt                           DateTime                         @db.Timestamptz(6)
  ChargingStationNetworkProfiles      ChargingStationNetworkProfiles[]
  SetNetworkProfiles                  SetNetworkProfiles[]
}

model SetNetworkProfiles {
  id                             Int                              @id @default(autoincrement())
  stationId                      String?                          @db.VarChar(255)
  correlationId                  String?                          @unique @db.VarChar(255)
  websocketServerConfigId        String?                          @db.VarChar(255)
  configurationSlot              Int?
  ocppVersion                    String?                          @db.VarChar(255)
  ocppTransport                  String?                          @db.VarChar(255)
  ocppCsmsUrl                    String?                          @db.VarChar(255)
  messageTimeout                 Int?
  securityProfile                Int?
  ocppInterface                  String?                          @db.VarChar(255)
  apn                            String?                          @db.VarChar(255)
  vpn                            String?                          @db.VarChar(255)
  createdAt                      DateTime                         @db.Timestamptz(6)
  updatedAt                      DateTime                         @db.Timestamptz(6)
  ChargingStationNetworkProfiles ChargingStationNetworkProfiles[]
  ServerNetworkProfiles          ServerNetworkProfiles?           @relation(fields: [websocketServerConfigId], references: [id], onDelete: NoAction)

  @@index([correlationId], map: "set_network_profiles_correlation_id")
}

model StatusNotifications {
  id                        Int                         @id @default(autoincrement())
  timestamp                 DateTime?                   @db.Timestamptz(6)
  connectorStatus           String?                     @db.VarChar(255)
  evseId                    Int?
  connectorId               Int?
  createdAt                 DateTime                    @db.Timestamptz(6)
  updatedAt                 DateTime                    @db.Timestamptz(6)
  stationId                 String?                     @db.VarChar(36)
  LatestStatusNotifications LatestStatusNotifications[]
  ChargingStations          ChargingStations?           @relation(fields: [stationId], references: [id])
}

model Subscriptions {
  id                 Int      @id @default(autoincrement())
  stationId          String?  @db.VarChar(255)
  onConnect          Boolean? @default(false)
  onClose            Boolean? @default(false)
  onMessage          Boolean? @default(false)
  sentMessage        Boolean? @default(false)
  messageRegexFilter String?  @db.VarChar(255)
  url                String?  @db.VarChar(255)
  createdAt          DateTime @db.Timestamptz(6)
  updatedAt          DateTime @db.Timestamptz(6)

  @@index([stationId], map: "subscriptions_station_id")
}

model Tariffs {
  id                  Int      @id @default(autoincrement())
  stationId           String?  @unique @db.VarChar(255)
  createdAt           DateTime @db.Timestamptz(6)
  updatedAt           DateTime @db.Timestamptz(6)
  currency            String   @db.Char(3)
  pricePerKwh         Decimal  @db.Decimal
  pricePerMin         Decimal? @db.Decimal
  pricePerSession     Decimal? @db.Decimal
  authorizationAmount Decimal? @db.Decimal
  paymentFee          Decimal? @db.Decimal
  taxRate             Decimal? @db.Decimal

  @@index([stationId], map: "tariffs_station_id")
}

model TransactionEvents {
  id                    Int           @id @default(autoincrement())
  stationId             String?       @db.VarChar(255)
  eventType             String?       @db.VarChar(255)
  timestamp             DateTime?     @db.Timestamptz(6)
  triggerReason         String?       @db.VarChar(255)
  seqNo                 Int?
  offline               Boolean?      @default(false)
  numberOfPhasesUsed    Int?
  cableMaxCurrent       Decimal?      @db.Decimal
  reservationId         Int?
  transactionInfo       Json?         @db.Json
  createdAt             DateTime      @db.Timestamptz(6)
  updatedAt             DateTime      @db.Timestamptz(6)
  transactionDatabaseId Int?
  evseId                Int?
  idTokenId             Int?
  MeterValues           MeterValues[]
  Evses                 Evses?        @relation(fields: [evseId], references: [databaseId])
  IdTokens              IdTokens?     @relation(fields: [idTokenId], references: [id])
  Transactions          Transactions? @relation(fields: [transactionDatabaseId], references: [id])
}

model Transactions {
  id                Int                 @id @default(autoincrement())
  stationId         String?             @db.VarChar(255)
  evseDatabaseId    Int?
  transactionId     String?             @db.VarChar(255)
  isActive          Boolean?
  chargingState     String?             @db.VarChar(255)
  timeSpentCharging BigInt?
  totalKwh          Decimal?            @db.Decimal
  stoppedReason     String?             @db.VarChar(255)
  remoteStartId     Int?
  createdAt         DateTime            @db.Timestamptz(6)
  updatedAt         DateTime            @db.Timestamptz(6)
  totalCost         Decimal?            @db.Decimal
  ChargingNeeds     ChargingNeeds[]
  ChargingProfiles  ChargingProfiles[]
  MeterValues       MeterValues[]
  TransactionEvents TransactionEvents[]
  Evses             Evses?              @relation(fields: [evseDatabaseId], references: [databaseId], onDelete: NoAction)
  ChargingStations  ChargingStations?   @relation(fields: [stationId], references: [id], onDelete: NoAction)

  @@unique([stationId, transactionId])
}

model VariableAttributes {
  id               Int                @id @default(autoincrement())
  stationId        String?            @db.VarChar(255)
  type             String?            @default("Actual") @db.VarChar(255)
  dataType         String?            @default("string") @db.VarChar(255)
  value            String?            @db.VarChar(4000)
  mutability       String?            @default("ReadWrite") @db.VarChar(255)
  persistent       Boolean?           @default(false)
  constant         Boolean?           @default(false)
  variableId       Int?
  componentId      Int?
  evseDatabaseId   Int?
  createdAt        DateTime           @db.Timestamptz(6)
  updatedAt        DateTime           @db.Timestamptz(6)
  bootConfigId     String?            @db.VarChar(255)
  generatedAt      DateTime?          @db.Timestamptz(6)
  Boots            Boots?             @relation(fields: [bootConfigId], references: [id])
  Components       Components?        @relation(fields: [componentId], references: [id], onDelete: NoAction)
  Evses            Evses?             @relation(fields: [evseDatabaseId], references: [databaseId], onDelete: NoAction)
  ChargingStations ChargingStations?  @relation(fields: [stationId], references: [id], onDelete: NoAction)
  Variables        Variables?         @relation(fields: [variableId], references: [id], onDelete: NoAction)
  VariableStatuses VariableStatuses[]

  @@unique([stationId, type, variableId, componentId])
  @@index([stationId], map: "variable_attributes_station_id")
}

model VariableCharacteristics {
  id                 Int        @id @default(autoincrement())
  unit               String?    @db.VarChar(255)
  dataType           String?    @db.VarChar(255)
  minLimit           Decimal?   @db.Decimal
  maxLimit           Decimal?   @db.Decimal
  valuesList         String?    @db.VarChar(4000)
  supportsMonitoring Boolean?
  variableId         Int?       @unique
  createdAt          DateTime   @db.Timestamptz(6)
  updatedAt          DateTime   @db.Timestamptz(6)
  Variables          Variables? @relation(fields: [variableId], references: [id], onDelete: NoAction)
}

model VariableMonitoringStatuses {
  id                   Int                  @id @default(autoincrement())
  status               String?              @db.VarChar(255)
  statusInfo           Json?                @db.Json
  variableMonitoringId Int?
  createdAt            DateTime             @db.Timestamptz(6)
  updatedAt            DateTime             @db.Timestamptz(6)
  VariableMonitorings  VariableMonitorings? @relation(fields: [variableMonitoringId], references: [databaseId], onDelete: NoAction)
}

model VariableMonitorings {
  databaseId                 Int                          @id @default(autoincrement())
  stationId                  String?                      @db.VarChar(255)
  id                         Int?
  transaction                Boolean?
  value                      Int?
  type                       String?                      @db.VarChar(255)
  severity                   Int?
  variableId                 Int?
  componentId                Int?
  createdAt                  DateTime                     @db.Timestamptz(6)
  updatedAt                  DateTime                     @db.Timestamptz(6)
  VariableMonitoringStatuses VariableMonitoringStatuses[]
  Components                 Components?                  @relation(fields: [componentId], references: [id], onDelete: NoAction)
  Variables                  Variables?                   @relation(fields: [variableId], references: [id], onDelete: NoAction)

  @@unique([stationId, id])
  @@index([stationId], map: "variable_monitorings_station_id")
}

model VariableStatuses {
  id                  Int                 @id @default(autoincrement())
  value               String?             @db.VarChar(4000)
  status              String?             @db.VarChar(255)
  statusInfo          Json?               @db.Json
  variableAttributeId Int?
  createdAt           DateTime            @db.Timestamptz(6)
  updatedAt           DateTime            @db.Timestamptz(6)
  VariableAttributes  VariableAttributes? @relation(fields: [variableAttributeId], references: [id], onDelete: Cascade)
}

model Variables {
  id                      Int                      @id @default(autoincrement())
  name                    String?                  @db.VarChar(255)
  instance                String?                  @db.VarChar(255)
  createdAt               DateTime                 @db.Timestamptz(6)
  updatedAt               DateTime                 @db.Timestamptz(6)
  ComponentVariables      ComponentVariables[]
  EventData               EventData[]
  VariableAttributes      VariableAttributes[]
  VariableCharacteristics VariableCharacteristics?
  VariableMonitorings     VariableMonitorings[]

  @@unique([name, instance])
}

model directus_activity {
  id                 Int                  @id @default(autoincrement())
  action             String               @db.VarChar(45)
  user               String?              @db.Uuid
  timestamp          DateTime             @default(now()) @db.Timestamptz(6)
  ip                 String?              @db.VarChar(50)
  user_agent         String?
  collection         String               @db.VarChar(64)
  item               String               @db.VarChar(255)
  comment            String?
  origin             String?              @db.VarChar(255)
  directus_revisions directus_revisions[]
}

model directus_collections {
  collection                 String                 @id @db.VarChar(64)
  icon                       String?                @db.VarChar(30)
  note                       String?
  display_template           String?                @db.VarChar(255)
  hidden                     Boolean                @default(false)
  singleton                  Boolean                @default(false)
  translations               Json?                  @db.Json
  archive_field              String?                @db.VarChar(64)
  archive_app_filter         Boolean                @default(true)
  archive_value              String?                @db.VarChar(255)
  unarchive_value            String?                @db.VarChar(255)
  sort_field                 String?                @db.VarChar(64)
  accountability             String?                @default("all") @db.VarChar(255)
  color                      String?                @db.VarChar(255)
  item_duplication_fields    Json?                  @db.Json
  sort                       Int?
  group                      String?                @db.VarChar(64)
  collapse                   String                 @default("open") @db.VarChar(255)
  preview_url                String?                @db.VarChar(255)
  versioning                 Boolean                @default(false)
  directus_collections       directus_collections?  @relation("directus_collectionsTodirectus_collections", fields: [group], references: [collection], onDelete: NoAction, onUpdate: NoAction, map: "directus_collections_group_foreign")
  other_directus_collections directus_collections[] @relation("directus_collectionsTodirectus_collections")
  directus_shares            directus_shares[]
  directus_versions          directus_versions[]
}

model directus_dashboards {
  id              String            @id @db.Uuid
  name            String            @db.VarChar(255)
  icon            String            @default("dashboard") @db.VarChar(30)
  note            String?
  date_created    DateTime?         @default(now()) @db.Timestamptz(6)
  user_created    String?           @db.Uuid
  color           String?           @db.VarChar(255)
  directus_users  directus_users?   @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_dashboards_user_created_foreign")
  directus_panels directus_panels[]
}

model directus_extensions {
  enabled Boolean @default(true)
  id      String  @id @db.Uuid
  folder  String  @db.VarChar(255)
  source  String  @db.VarChar(255)
  bundle  String? @db.Uuid
}

model directus_fields {
  id                 Int      @id @default(autoincrement())
  collection         String   @db.VarChar(64)
  field              String   @db.VarChar(64)
  special            String?  @db.VarChar(64)
  interface          String?  @db.VarChar(64)
  options            Json?    @db.Json
  display            String?  @db.VarChar(64)
  display_options    Json?    @db.Json
  readonly           Boolean  @default(false)
  hidden             Boolean  @default(false)
  sort               Int?
  width              String?  @default("full") @db.VarChar(30)
  translations       Json?    @db.Json
  note               String?
  conditions         Json?    @db.Json
  required           Boolean? @default(false)
  group              String?  @db.VarChar(64)
  validation         Json?    @db.Json
  validation_message String?
}

model directus_files {
  id                                                                    String              @id @db.Uuid
  storage                                                               String              @db.VarChar(255)
  filename_disk                                                         String?             @db.VarChar(255)
  filename_download                                                     String              @db.VarChar(255)
  title                                                                 String?             @db.VarChar(255)
  type                                                                  String?             @db.VarChar(255)
  folder                                                                String?             @db.Uuid
  uploaded_by                                                           String?             @db.Uuid
  uploaded_on                                                           DateTime            @default(now()) @db.Timestamptz(6)
  modified_by                                                           String?             @db.Uuid
  modified_on                                                           DateTime            @default(now()) @db.Timestamptz(6)
  charset                                                               String?             @db.VarChar(50)
  filesize                                                              BigInt?
  width                                                                 Int?
  height                                                                Int?
  duration                                                              Int?
  embed                                                                 String?             @db.VarChar(200)
  description                                                           String?
  location                                                              String?
  tags                                                                  String?
  metadata                                                              Json?               @db.Json
  focal_point_x                                                         Int?
  focal_point_y                                                         Int?
  directus_folders                                                      directus_folders?   @relation(fields: [folder], references: [id], onUpdate: NoAction, map: "directus_files_folder_foreign")
  directus_users_directus_files_modified_byTodirectus_users             directus_users?     @relation("directus_files_modified_byTodirectus_users", fields: [modified_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_modified_by_foreign")
  directus_users_directus_files_uploaded_byTodirectus_users             directus_users?     @relation("directus_files_uploaded_byTodirectus_users", fields: [uploaded_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_files_uploaded_by_foreign")
  directus_settings_directus_settings_project_logoTodirectus_files      directus_settings[] @relation("directus_settings_project_logoTodirectus_files")
  directus_settings_directus_settings_public_backgroundTodirectus_files directus_settings[] @relation("directus_settings_public_backgroundTodirectus_files")
  directus_settings_directus_settings_public_faviconTodirectus_files    directus_settings[] @relation("directus_settings_public_faviconTodirectus_files")
  directus_settings_directus_settings_public_foregroundTodirectus_files directus_settings[] @relation("directus_settings_public_foregroundTodirectus_files")
}

model directus_flows {
  id                  String                @id @db.Uuid
  name                String                @db.VarChar(255)
  icon                String?               @db.VarChar(30)
  color               String?               @db.VarChar(255)
  description         String?
  status              String                @default("active") @db.VarChar(255)
  trigger             String?               @db.VarChar(255)
  accountability      String?               @default("all") @db.VarChar(255)
  options             Json?                 @db.Json
  operation           String?               @unique(map: "directus_flows_operation_unique") @db.Uuid
  date_created        DateTime?             @default(now()) @db.Timestamptz(6)
  user_created        String?               @db.Uuid
  directus_users      directus_users?       @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_flows_user_created_foreign")
  directus_operations directus_operations[]
  directus_webhooks   directus_webhooks[]
}

model directus_folders {
  id                     String              @id @db.Uuid
  name                   String              @db.VarChar(255)
  parent                 String?             @db.Uuid
  directus_files         directus_files[]
  directus_folders       directus_folders?   @relation("directus_foldersTodirectus_folders", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_folders_parent_foreign")
  other_directus_folders directus_folders[]  @relation("directus_foldersTodirectus_folders")
  directus_settings      directus_settings[]
}

model directus_migrations {
  version   String    @id @db.VarChar(255)
  name      String    @db.VarChar(255)
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
}

model directus_notifications {
  id                                                              Int             @id @default(autoincrement())
  timestamp                                                       DateTime?       @default(now()) @db.Timestamptz(6)
  status                                                          String?         @default("inbox") @db.VarChar(255)
  recipient                                                       String          @db.Uuid
  sender                                                          String?         @db.Uuid
  subject                                                         String          @db.VarChar(255)
  message                                                         String?
  collection                                                      String?         @db.VarChar(64)
  item                                                            String?         @db.VarChar(255)
  directus_users_directus_notifications_recipientTodirectus_users directus_users  @relation("directus_notifications_recipientTodirectus_users", fields: [recipient], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_notifications_recipient_foreign")
  directus_users_directus_notifications_senderTodirectus_users    directus_users? @relation("directus_notifications_senderTodirectus_users", fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_notifications_sender_foreign")
}

model directus_operations {
  id                                                                         String               @id @db.Uuid
  name                                                                       String?              @db.VarChar(255)
  key                                                                        String               @db.VarChar(255)
  type                                                                       String               @db.VarChar(255)
  position_x                                                                 Int
  position_y                                                                 Int
  options                                                                    Json?                @db.Json
  resolve                                                                    String?              @unique(map: "directus_operations_resolve_unique") @db.Uuid
  reject                                                                     String?              @unique(map: "directus_operations_reject_unique") @db.Uuid
  flow                                                                       String               @db.Uuid
  date_created                                                               DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                               String?              @db.Uuid
  directus_flows                                                             directus_flows       @relation(fields: [flow], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_operations_flow_foreign")
  directus_operations_directus_operations_rejectTodirectus_operations        directus_operations? @relation("directus_operations_rejectTodirectus_operations", fields: [reject], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_reject_foreign")
  other_directus_operations_directus_operations_rejectTodirectus_operations  directus_operations? @relation("directus_operations_rejectTodirectus_operations")
  directus_operations_directus_operations_resolveTodirectus_operations       directus_operations? @relation("directus_operations_resolveTodirectus_operations", fields: [resolve], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_operations_resolve_foreign")
  other_directus_operations_directus_operations_resolveTodirectus_operations directus_operations? @relation("directus_operations_resolveTodirectus_operations")
  directus_users                                                             directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_operations_user_created_foreign")
}

model directus_panels {
  id                  String              @id @db.Uuid
  dashboard           String              @db.Uuid
  name                String?             @db.VarChar(255)
  icon                String?             @db.VarChar(30)
  color               String?             @db.VarChar(10)
  show_header         Boolean             @default(false)
  note                String?
  type                String              @db.VarChar(255)
  position_x          Int
  position_y          Int
  width               Int
  height              Int
  options             Json?               @db.Json
  date_created        DateTime?           @default(now()) @db.Timestamptz(6)
  user_created        String?             @db.Uuid
  directus_dashboards directus_dashboards @relation(fields: [dashboard], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_panels_dashboard_foreign")
  directus_users      directus_users?     @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_panels_user_created_foreign")
}

model directus_permissions {
  id             Int             @id @default(autoincrement())
  role           String?         @db.Uuid
  collection     String          @db.VarChar(64)
  action         String          @db.VarChar(10)
  permissions    Json?           @db.Json
  validation     Json?           @db.Json
  presets        Json?           @db.Json
  fields         String?
  directus_roles directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_permissions_role_foreign")
}

model directus_presets {
  id               Int             @id @default(autoincrement())
  bookmark         String?         @db.VarChar(255)
  user             String?         @db.Uuid
  role             String?         @db.Uuid
  collection       String?         @db.VarChar(64)
  search           String?         @db.VarChar(100)
  layout           String?         @default("tabular") @db.VarChar(100)
  layout_query     Json?           @db.Json
  layout_options   Json?           @db.Json
  refresh_interval Int?
  filter           Json?           @db.Json
  icon             String?         @default("bookmark") @db.VarChar(30)
  color            String?         @db.VarChar(255)
  directus_roles   directus_roles? @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_role_foreign")
  directus_users   directus_users? @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_presets_user_foreign")
}

model directus_relations {
  id                      Int     @id @default(autoincrement())
  many_collection         String  @db.VarChar(64)
  many_field              String  @db.VarChar(64)
  one_collection          String? @db.VarChar(64)
  one_field               String? @db.VarChar(64)
  one_collection_field    String? @db.VarChar(64)
  one_allowed_collections String?
  junction_field          String? @db.VarChar(64)
  sort_field              String? @db.VarChar(64)
  one_deselect_action     String  @default("nullify") @db.VarChar(255)
}

model directus_revisions {
  id                       Int                  @id @default(autoincrement())
  activity                 Int
  collection               String               @db.VarChar(64)
  item                     String               @db.VarChar(255)
  data                     Json?                @db.Json
  delta                    Json?                @db.Json
  parent                   Int?
  version                  String?              @db.Uuid
  directus_activity        directus_activity    @relation(fields: [activity], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_activity_foreign")
  directus_revisions       directus_revisions?  @relation("directus_revisionsTodirectus_revisions", fields: [parent], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_revisions_parent_foreign")
  other_directus_revisions directus_revisions[] @relation("directus_revisionsTodirectus_revisions")
  directus_versions        directus_versions?   @relation(fields: [version], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_revisions_version_foreign")
}

model directus_roles {
  id                   String                 @id @db.Uuid
  name                 String                 @db.VarChar(100)
  icon                 String                 @default("supervised_user_circle") @db.VarChar(30)
  description          String?
  ip_access            String?
  enforce_tfa          Boolean                @default(false)
  admin_access         Boolean                @default(false)
  app_access           Boolean                @default(true)
  directus_permissions directus_permissions[]
  directus_presets     directus_presets[]
  directus_shares      directus_shares[]
  directus_users       directus_users[]
}

model directus_sessions {
  token           String           @id @db.VarChar(64)
  user            String?          @db.Uuid
  expires         DateTime         @db.Timestamptz(6)
  ip              String?          @db.VarChar(255)
  user_agent      String?
  share           String?          @db.Uuid
  origin          String?          @db.VarChar(255)
  directus_shares directus_shares? @relation(fields: [share], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_share_foreign")
  directus_users  directus_users?  @relation(fields: [user], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_sessions_user_foreign")
}

model directus_settings {
  id                                                                 Int               @id @default(autoincrement())
  project_name                                                       String            @default("Directus") @db.VarChar(100)
  project_url                                                        String?           @db.VarChar(255)
  project_color                                                      String            @default("#6644FF") @db.VarChar(255)
  project_logo                                                       String?           @db.Uuid
  public_foreground                                                  String?           @db.Uuid
  public_background                                                  String?           @db.Uuid
  public_note                                                        String?
  auth_login_attempts                                                Int?              @default(25)
  auth_password_policy                                               String?           @db.VarChar(100)
  storage_asset_transform                                            String?           @default("all") @db.VarChar(7)
  storage_asset_presets                                              Json?             @db.Json
  custom_css                                                         String?
  storage_default_folder                                             String?           @db.Uuid
  basemaps                                                           Json?             @db.Json
  mapbox_key                                                         String?           @db.VarChar(255)
  module_bar                                                         Json?             @db.Json
  project_descriptor                                                 String?           @db.VarChar(100)
  default_language                                                   String            @default("en-US") @db.VarChar(255)
  custom_aspect_ratios                                               Json?             @db.Json
  public_favicon                                                     String?           @db.Uuid
  default_appearance                                                 String            @default("auto") @db.VarChar(255)
  default_theme_light                                                String?           @db.VarChar(255)
  theme_light_overrides                                              Json?             @db.Json
  default_theme_dark                                                 String?           @db.VarChar(255)
  theme_dark_overrides                                               Json?             @db.Json
  report_error_url                                                   String?           @db.VarChar(255)
  report_bug_url                                                     String?           @db.VarChar(255)
  report_feature_url                                                 String?           @db.VarChar(255)
  directus_files_directus_settings_project_logoTodirectus_files      directus_files?   @relation("directus_settings_project_logoTodirectus_files", fields: [project_logo], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_project_logo_foreign")
  directus_files_directus_settings_public_backgroundTodirectus_files directus_files?   @relation("directus_settings_public_backgroundTodirectus_files", fields: [public_background], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_background_foreign")
  directus_files_directus_settings_public_faviconTodirectus_files    directus_files?   @relation("directus_settings_public_faviconTodirectus_files", fields: [public_favicon], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_favicon_foreign")
  directus_files_directus_settings_public_foregroundTodirectus_files directus_files?   @relation("directus_settings_public_foregroundTodirectus_files", fields: [public_foreground], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_settings_public_foreground_foreign")
  directus_folders                                                   directus_folders? @relation(fields: [storage_default_folder], references: [id], onUpdate: NoAction, map: "directus_settings_storage_default_folder_foreign")
}

model directus_shares {
  id                   String               @id @db.Uuid
  name                 String?              @db.VarChar(255)
  collection           String               @db.VarChar(64)
  item                 String               @db.VarChar(255)
  role                 String?              @db.Uuid
  password             String?              @db.VarChar(255)
  user_created         String?              @db.Uuid
  date_created         DateTime?            @default(now()) @db.Timestamptz(6)
  date_start           DateTime?            @db.Timestamptz(6)
  date_end             DateTime?            @db.Timestamptz(6)
  times_used           Int?                 @default(0)
  max_uses             Int?
  directus_sessions    directus_sessions[]
  directus_collections directus_collections @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_collection_foreign")
  directus_roles       directus_roles?      @relation(fields: [role], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "directus_shares_role_foreign")
  directus_users       directus_users?      @relation(fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_shares_user_created_foreign")
}

model directus_translations {
  id       String @id @db.Uuid
  language String @db.VarChar(255)
  key      String @db.VarChar(255)
  value    String
}

model directus_users {
  id                                                                      String                   @id @db.Uuid
  first_name                                                              String?                  @db.VarChar(50)
  last_name                                                               String?                  @db.VarChar(50)
  email                                                                   String?                  @unique(map: "directus_users_email_unique") @db.VarChar(128)
  password                                                                String?                  @db.VarChar(255)
  location                                                                String?                  @db.VarChar(255)
  title                                                                   String?                  @db.VarChar(50)
  description                                                             String?
  tags                                                                    Json?                    @db.Json
  avatar                                                                  String?                  @db.Uuid
  language                                                                String?                  @db.VarChar(255)
  tfa_secret                                                              String?                  @db.VarChar(255)
  status                                                                  String                   @default("active") @db.VarChar(16)
  role                                                                    String?                  @db.Uuid
  token                                                                   String?                  @unique(map: "directus_users_token_unique") @db.VarChar(255)
  last_access                                                             DateTime?                @db.Timestamptz(6)
  last_page                                                               String?                  @db.VarChar(255)
  provider                                                                String                   @default("default") @db.VarChar(128)
  external_identifier                                                     String?                  @unique(map: "directus_users_external_identifier_unique") @db.VarChar(255)
  auth_data                                                               Json?                    @db.Json
  email_notifications                                                     Boolean?                 @default(true)
  appearance                                                              String?                  @db.VarChar(255)
  theme_dark                                                              String?                  @db.VarChar(255)
  theme_light                                                             String?                  @db.VarChar(255)
  theme_light_overrides                                                   Json?                    @db.Json
  theme_dark_overrides                                                    Json?                    @db.Json
  directus_dashboards                                                     directus_dashboards[]
  directus_files_directus_files_modified_byTodirectus_users               directus_files[]         @relation("directus_files_modified_byTodirectus_users")
  directus_files_directus_files_uploaded_byTodirectus_users               directus_files[]         @relation("directus_files_uploaded_byTodirectus_users")
  directus_flows                                                          directus_flows[]
  directus_notifications_directus_notifications_recipientTodirectus_users directus_notifications[] @relation("directus_notifications_recipientTodirectus_users")
  directus_notifications_directus_notifications_senderTodirectus_users    directus_notifications[] @relation("directus_notifications_senderTodirectus_users")
  directus_operations                                                     directus_operations[]
  directus_panels                                                         directus_panels[]
  directus_presets                                                        directus_presets[]
  directus_sessions                                                       directus_sessions[]
  directus_shares                                                         directus_shares[]
  directus_roles                                                          directus_roles?          @relation(fields: [role], references: [id], onUpdate: NoAction, map: "directus_users_role_foreign")
  directus_versions_directus_versions_user_createdTodirectus_users        directus_versions[]      @relation("directus_versions_user_createdTodirectus_users")
  directus_versions_directus_versions_user_updatedTodirectus_users        directus_versions[]      @relation("directus_versions_user_updatedTodirectus_users")
}

model directus_versions {
  id                                                            String               @id @db.Uuid
  key                                                           String               @db.VarChar(64)
  name                                                          String?              @db.VarChar(255)
  collection                                                    String               @db.VarChar(64)
  item                                                          String               @db.VarChar(255)
  hash                                                          String?              @db.VarChar(255)
  date_created                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  date_updated                                                  DateTime?            @default(now()) @db.Timestamptz(6)
  user_created                                                  String?              @db.Uuid
  user_updated                                                  String?              @db.Uuid
  directus_revisions                                            directus_revisions[]
  directus_collections                                          directus_collections @relation(fields: [collection], references: [collection], onDelete: Cascade, onUpdate: NoAction, map: "directus_versions_collection_foreign")
  directus_users_directus_versions_user_createdTodirectus_users directus_users?      @relation("directus_versions_user_createdTodirectus_users", fields: [user_created], references: [id], onUpdate: NoAction, map: "directus_versions_user_created_foreign")
  directus_users_directus_versions_user_updatedTodirectus_users directus_users?      @relation("directus_versions_user_updatedTodirectus_users", fields: [user_updated], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "directus_versions_user_updated_foreign")
}

model directus_webhooks {
  id                            Int             @id @default(autoincrement())
  name                          String          @db.VarChar(255)
  method                        String          @default("POST") @db.VarChar(10)
  url                           String          @db.VarChar(255)
  status                        String          @default("active") @db.VarChar(10)
  data                          Boolean         @default(true)
  actions                       String          @db.VarChar(100)
  collections                   String          @db.VarChar(255)
  headers                       Json?           @db.Json
  was_active_before_deprecation Boolean         @default(false)
  migrated_flow                 String?         @db.Uuid
  directus_flows                directus_flows? @relation(fields: [migrated_flow], references: [id], onUpdate: NoAction, map: "directus_webhooks_migrated_flow_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

enum enum_InstalledCertificates_certificateType {
  V2GRootCertificate
  MORootCertificate
  CSMSRootCertificate
  V2GCertificateChain
  ManufacturerRootCertificate
}
